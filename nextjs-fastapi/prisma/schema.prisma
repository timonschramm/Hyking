generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Activity {
    id                      Int      @id @default(autoincrement())
    title                   String
    teaserText              String
    descriptionShort        String
    descriptionLong         String
    categoryId              Int
    difficulty              Int
    landscapeRating         Int
    experienceRating        Int
    staminaRating           Int
    length                  Float
    ascent                  Float
    descent                 Float
    durationMin             Float
    minAltitude             Float
    maxAltitude             Float
    pointLat                Float
    pointLon                Float
    isWinter                Boolean
    isClosed                Boolean
    primaryRegion           String
    primaryImageId          String
    publicTransportFriendly Boolean
    category                Category @relation(fields: [categoryId], references: [id])
    seasons                 Season[]
    images                  Image[]
}

model Category {
    id         Int        @id @default(autoincrement())
    name       String
    activities Activity[]
}

enum Month {
    jan
    feb
    mar
    apr
    may
    jun
    jul
    aug
    sep
    oct
    nov
    dec
}

model Season {
    id         Int      @id @default(autoincrement())
    activityId Int
    month      String
    isActive   Boolean
    activity   Activity @relation(fields: [activityId], references: [id])
}

model Image {
    id         Int      @id @default(autoincrement())
    activityId Int
    imageId    String
    activity   Activity @relation(fields: [activityId], references: [id])
}

model User {
    id               Int      @id @default(autoincrement())
    age              Int?
    imageUrl         String?
    gender           String?
    location         String?
    experienceLevel  Int? // difficulty x experienceRating
    preferredPace    String?
    preferredDistance String[] // metrics to come distance
    hobbies          String[]
    dogFriendly      Boolean?
    transportation   String?
    spotifyConnected Boolean  @default(false)
    topArtists       Artist[]
    onboardingStep   Int      @default(0)
}

model Artist {
    id     Int     @id @default(autoincrement())
    name   String
    image  String
    userId Int
    user   User    @relation(fields: [userId], references: [id])
    genres Genre[] @relation("ArtistGenres")
}

model Genre {
    id      Int      @id @default(autoincrement())
    name    String
    artists Artist[] @relation("ArtistGenres")
}
