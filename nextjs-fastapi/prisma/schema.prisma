generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Activity {
  id                      Int             @id @default(autoincrement())
  title                   String
  teaserText              String
  descriptionShort        String
  descriptionLong         String
  categoryId              Int
  difficulty              Int
  landscapeRating         Int
  experienceRating        Int
  staminaRating           Int
  length                  Float
  ascent                  Float
  descent                 Float
  durationMin             Float
  minAltitude             Float
  maxAltitude             Float
  pointLat                Float
  pointLon                Float
  isWinter                Boolean
  isClosed                Boolean
  primaryRegion           String
  primaryImageId          String
  publicTransportFriendly Boolean
  category                Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  swipes                  ActivitySwipe[]
  images                  Image[]
  seasons                 Season[]
  groupMatches GroupMatch[] @relation("ActivitySuggestions")
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String
  activities Activity[]
}

model Season {
  id         Int      @id @default(autoincrement())
  activityId Int
  month      String
  isActive   Boolean
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Image {
  id         Int      @id @default(autoincrement())
  activityId Int
  imageId    String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Profile {
  id                  String             @id @default(cuid())
  age                 Int?
  imageUrl            String?
  gender              String?
  location            String?
  dogFriendly         Boolean?
  spotifyConnected    Boolean            @default(false)
  email               String
  onboardingCompleted Boolean            @default(false)
  spotifyAccessToken  String?
  spotifyTokenExpiry  DateTime?
  spotifyRefreshToken String?
  bio                 String?
  displayName         String?
  activitySwipes      ActivitySwipe[]
  artists             UserArtist[]
  interests           UserInterest[]
  receivedSwipes      UserSwipe[]        @relation("SwipeReceiver")
  sentSwipes          UserSwipe[]        @relation("SwipeSender")
  matches             UsersOnMatch[]
  messages            Message[]
  participants        Participant[]
  skills              UserSkill[]        @relation("UserSkills")
  groupSuggestionProfiles ProfileOnGroupSuggestion[]
}

model UserSwipe {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  action     String
  timestamp  DateTime @default(now())
  isViewed   Boolean  @default(false)
  receiver   Profile  @relation("SwipeReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     Profile  @relation("SwipeSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId, action, timestamp(sort: Desc)])
  @@index([senderId, action])
}

model Match {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  lastActivity DateTime      @default(now())
  isActive     Boolean       @default(true)
  users        UsersOnMatch[]
  chatRoom     ChatRoom?
}

model UsersOnMatch {
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId   String
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([matchId, userId])
  @@unique([userId, matchId])
}

model Artist {
  name      String
  imageUrl  String?
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  spotifyId String       @unique
  updatedAt DateTime     @updatedAt
  profiles  UserArtist[]
  genres    Genre[]      @relation("ArtistGenres")
}

model Genre {
  id      String   @id @default(uuid())
  name    String   @unique
  artists Artist[] @relation("ArtistGenres")
}

model UserArtist {
  id        String   @id @default(cuid())
  profileId String
  artistId  String
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, artistId])
  @@index([profileId, hidden])
}

model Interest {
  id          String           @id @default(cuid())
  name        String           @unique
  displayName String?           // This will be the user-facing name with emoji (e.g., "ðŸ’­ Deep Chats")
  category    InterestCategory
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserInterest[]
}

model UserInterest {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  interestId String
  profileId  String
  updatedAt  DateTime @updatedAt
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, interestId])
}

model ActivitySwipe {
  id         String   @id @default(cuid())
  userId     String
  activityId Int
  action     String
  timestamp  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}

model Skill {
  id           String       @id @default(cuid())
  name         String       @unique  // e.g., "EXPERIENCE", "PACE", "STAMINA"
  displayName  String       // e.g., "Experience Level", "Preferred Pace"
  skillLevels  SkillLevel[]
  userSkills   UserSkill[]
}

model SkillLevel {
  id           String      @id @default(cuid())
  skillId      String
  name         String      // e.g., "BEGINNER", "LEISURELY"
  displayName  String      // e.g., "Beginner", "Leisurely Pace"
  numericValue Float       // e.g., 0.5, 2.0
  skill        Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  userSkills   UserSkill[]

  @@unique([skillId, name])
}

model UserSkill {
  id           String     @id @default(cuid())
  profileId    String
  skillId      String
  skillLevelId String
  profile      Profile    @relation("UserSkills", fields: [profileId], references: [id], onDelete: Cascade)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillLevel   SkillLevel @relation(fields: [skillLevelId], references: [id], onDelete: Cascade)

  @@unique([profileId, skillId])
  @@index([profileId])
}

enum Month { 
  jan
  feb
  mar
  apr
  may
  jun
  jul
  aug
  sep
  oct
  nov
  dec
}

enum InterestCategory {
  SELF_CARE
  SPORTS
  CREATIVITY
  GOING_OUT
  STAYING_IN
}

model ChatRoom {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lastMessage  DateTime?
  messages     Message[]
  participants Participant[]
  matchId      String?      @unique
  match        Match?       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  groupMatch   GroupMatch?  @relation(fields: [groupMatchId], references: [id], onDelete: Cascade)
  groupMatchId String?      @unique
}

model Message {
  id         String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now())
  chatRoomId String
  senderId   String
  isAI       Boolean   @default(false)
  metadata   Json?
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender     Profile   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Participant {
  id         String    @id @default(cuid())
  chatRoomId String
  profileId  String
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  lastRead   DateTime  @default(now())

  @@unique([chatRoomId, profileId])
  @@index([profileId])
}

model GroupMatch {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  profiles     ProfileOnGroupSuggestion[]
  hikeSuggestions Activity[] @relation("ActivitySuggestions")
  chatRoom     ChatRoom?
  description  String
}

model ProfileOnGroupSuggestion {
  profile                Profile                @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId              String
  groupMatch GroupMatch @relation(fields: [groupMatchId], references: [id], onDelete: Cascade)
  groupMatchId String
  hasAccepted           Boolean                @default(false)

  @@id([profileId, groupMatchId])
}

// TODO DOes Indexing Make Sense?