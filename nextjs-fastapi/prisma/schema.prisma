generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Activity {
    id                      Int      @id @default(autoincrement())
    title                   String
    teaserText              String
    descriptionShort        String
    descriptionLong         String
    categoryId              Int
    difficulty              Int
    landscapeRating         Int
    experienceRating        Int
    staminaRating           Int
    length                  Float
    ascent                  Float
    descent                 Float
    durationMin             Float
    minAltitude             Float
    maxAltitude             Float
    pointLat                Float
    pointLon                Float
    isWinter                Boolean
    isClosed                Boolean
    primaryRegion           String
    primaryImageId          String
    publicTransportFriendly Boolean
    category                Category @relation(fields: [categoryId], references: [id])
    seasons                 Season[]
    images                  Image[]
}

model Category {
    id         Int        @id @default(autoincrement())
    name       String
    activities Activity[]
}

enum Month {
    jan
    feb
    mar
    apr
    may
    jun
    jul
    aug
    sep
    oct
    nov
    dec
}

model Season {
    id         Int      @id @default(autoincrement())
    activityId Int
    month      String
    isActive   Boolean
    activity   Activity @relation(fields: [activityId], references: [id])
}

model Image {
    id         Int      @id @default(autoincrement())
    activityId Int
    imageId    String
    activity   Activity @relation(fields: [activityId], references: [id])
}

model Profile {
    id                String   @id @default(cuid())
    email             String
    age               Int?
    imageUrl          String?
    gender            String?
    location          String?
    experienceLevel   Int?
    preferredPace     Int?
    preferredDistance Int?
    hobbies           String[]
    dogFriendly       Boolean?
    transportation    Int?
    spotifyConnected  Boolean  @default(false)
    spotifyAccessToken  String?
    spotifyRefreshToken String?
    spotifyTokenExpiry  DateTime?
    onboardingCompleted Boolean @default(false)
    artists           UserArtist[]
}

model Artist {
    id        String   @id @default(cuid())
    spotifyId String   @unique
    name      String
    imageUrl  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    genres    Genre[] @relation("ArtistGenres")
    profiles  UserArtist[]
}

model Genre {
    id      String   @id @default(uuid())
    name    String   @unique
    artists Artist[] @relation("ArtistGenres")
}

model UserArtist {
    id        String   @id @default(cuid())
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String
    artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
    artistId  String
    hidden    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([profileId, artistId])
}
