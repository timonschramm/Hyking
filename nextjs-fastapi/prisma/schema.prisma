generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Activity {
    id                      Int      @id @default(autoincrement())
    title                   String
    teaserText              String
    descriptionShort        String
    descriptionLong         String
    categoryId              Int
    difficulty              Int
    landscapeRating         Int
    experienceRating        Int
    staminaRating           Int
    length                  Float
    ascent                  Float
    descent                 Float
    durationMin             Float
    minAltitude             Float
    maxAltitude             Float
    pointLat                Float
    pointLon                Float
    isWinter                Boolean
    isClosed                Boolean
    primaryRegion           String
    primaryImageId          String
    publicTransportFriendly Boolean
    category                Category @relation(fields: [categoryId], references: [id])
    seasons                 Season[]
    images                  Image[]
}

model Category {
    id         Int        @id @default(autoincrement())
    name       String
    activities Activity[]
}

enum Month {
    jan
    feb
    mar
    apr
    may
    jun
    jul
    aug
    sep
    oct
    nov
    dec
}

model Season {
    id         Int      @id @default(autoincrement())
    activityId Int
    month      String
    isActive   Boolean
    activity   Activity @relation(fields: [activityId], references: [id])
}

model Image {
    id         Int      @id @default(autoincrement())
    activityId Int
    imageId    String
    activity   Activity @relation(fields: [activityId], references: [id])
}

model Profile {
    id                String   @id 
    email             String
    age               Int?
    imageUrl          String?
    gender            String?
    location          String?
    experienceLevel   Int? // 0 = beginner, 1 = intermediate, 2 = advanced
    preferredPace     Int? // Updated to Int
    preferredDistance Int? // 0 = 0-3km, 1 = 3-6km, 2 = 6-10km, 3 = 10-20km, 4 = more
    hobbies           String[]
    dogFriendly       Boolean?
    transportation    Int? // 0 = car, 1 = public transport, 2 = both
    spotifyConnected  Boolean  @default(false)
    topArtists        Artist[] 
    onboardingCompleted Boolean @default(false)

}

model Artist {
    id     Int      @id @default(autoincrement())
    name   String
    imageUrl         String
    artistId         String
    profile             Profile    @relation(fields: [profileId], references: [id])
    profileId           String
    genres           Genre[] @relation("ArtistGenres")
}

model Genre {
    id      String   @id @default(uuid())
    name    String
    artists Artist[] @relation("ArtistGenres")
}
